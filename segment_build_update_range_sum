#include<bits/stdc++.h>
using namespace std;

void build_segmentTree(vector<int>& segmentTree, vector<int>& array, int curr_idx, int left, int right) {
    if(left == right) {
        segmentTree[curr_idx] = array[left];
        return;
    }
    int mid = left + (right - left) /2;
    build_segmentTree(segmentTree, array, 2*curr_idx + 1, left, mid);
    build_segmentTree(segmentTree, array, 2*curr_idx + 2, mid + 1, right);

    segmentTree[curr_idx] = segmentTree[2*curr_idx + 1] + segmentTree[2*curr_idx + 2];
    return;

}

void update_query_segment_tree(vector<int>& segmentTree, int idx, int value, int curr_idx, int left, int right) {
    if(left == right) {
        segmentTree[curr_idx] = value;
        return;
    }
    int mid = left + (right - left)/ 2;
    if(idx <= mid) {
        update_query_segment_tree(segmentTree, idx, value, 2*curr_idx + 1, left, mid );
    }
    else{
        update_query_segment_tree(segmentTree, idx, value, 2*curr_idx + 2, mid + 1, right);
    }
    segmentTree[curr_idx] = segmentTree[2*curr_idx + 1] + segmentTree[2*curr_idx + 2];
    return;
}

int query(vector<int>& segmentTree, int start, int end , int curr_idx, int left, int right) {

    if(left > end || right < start || left > right) {
        return 0;
    }
    else if(left >= start && right <= end) {
        return segmentTree[curr_idx];
    }
    else {
        int mid = left + (right - left) / 2;
        return query(segmentTree, start, end, 2*curr_idx + 1, left, mid) + query(segmentTree, start, end, 2*curr_idx + 2, mid + 1, right);
    }
    return -1;
}


int main() {

    vector<int> array{3,4,5,6};
    int n = array.size();

    vector<int>segmentTree(4*n);
    build_segmentTree(segmentTree, array, 0, 0, n - 1);
    for(auto &it: segmentTree) {
        cout<<it<<" ";
    }
    cout<<endl;
    update_query_segment_tree(segmentTree, 2, 6,0,0, n - 1);
    for(auto &it: segmentTree) {
        cout<<it<<" ";
    }
    cout<<endl;
    cout<<query(segmentTree, 1,3, 0, 0 , n - 1);
    return 0;
}
